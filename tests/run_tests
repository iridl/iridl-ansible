#!/bin/bash

# Tests the ansible role in a VM.

# Two modes are available: in host mode, ansible runs on the host,
# connecting to the VM via ssh; in guest mode, ansible is installed in
# the VM and then run there, using a local connection.

# Available sub-commands:
#
#    ansible_test: runs ansible-test. Only available in host mode,
#    because the version of ansible in the guest is too old.
#
#    full: runs the playbook including the update_datalib script. Do
#    this for the first run of the playbook on a fresh VM.
#
#    incremental: runs the playbook without the update_datalib
#    script. Use this for quick testing during development.
#
#    idempotency: like incremental, but fails if the run reports any
#    changes. Use this on a second run to verify that the playbook is
#    idempotent.
#
#    destroy: tears down the VM. If this action isn't invoked, the VM
#    is left running when the script exits and subsequent runs will
#    reuse it.

# Examples:
#
# A single run of the playbook typical during development. Leaves the
# VM running after the script exits.
#
#    ./run_tests --mode host incremental
#
# The full test suite for use in CI.
#
#    ./run_tests --mode host ansible_test full idempotency destroy
#    ./run_tests --mode guest full idempotency destroy

fail() {
  echo $*
  exit 1
}

cleanup() {
    [[ -n "$builddir" ]] && rm -rf $builddir
}

trap cleanup EXIT

destroy() {
    vagrant destroy --force
}

ansible_test() {
    # In a subshell so that the cd doesn't affect later actions
    (
        cd $builddir/ansible_collections/iridl/iridl &&
        ansible-test sanity --docker
    )
}

full() {
    _playbook -e run_update_script=yes
}

incremental() {
    _playbook
}

idempotency() {
    echo starting idempotency test $(date)
    output=$(_playbook)
    playbook_status=$?
    echo "$output" | grep '^dlserver1 .*changed=0 ' > /dev/null
    idempotency_status=$?
    if (( $playbook_status || $idempotency_status )); then
        echo "$output"
        echo idempotency test failed $(date)
        return 1
    fi
    echo idempotency test succeeded $(date)
}

_install() {
    if [[ -z "$builddir" ]]; then
        builddir=$(mktemp --tmpdir=/tmp --directory ansible-test.XXXXXXXXXX) || return 1
        # Current docs say to use ANSIBLE_COLLECTIONS_PATH singular, but
        # ansible 2.9 uses ANSIBLE_COLLECTIONS_PATHS plural, and later
        # versions respect that too.
        export ANSIBLE_COLLECTIONS_PATHS=$builddir

        # This works with ansible 4:
        #
        #     ansible-galaxy collection install ..
        #
        # but ansible 2.9 doesn't support a path in place of a
        # collection name, so doing it in two steps for now.
        ansible-galaxy collection build --output-path $builddir .. || return 1
        ansible-galaxy collection install $builddir/*.tar.gz || return 1
    fi
}

_up() {
    # Try repeatedly to connect to the VM. If the ssh port isn't open
    # when ansible attempts to connect (e.g. after the provisioner
    # reboots the VM), then attempts to connect to it fail immediately
    # rather than waiting for the connection timeout. The
    # vagrant-reload plugin would be a cleaner way to handle this, but
    # the version of vagrant I'm getting from ubuntu 18.04 is too old
    # to support that.
    vagrant up || return 1
    echo waiting for VM
    i=10
    while (( i > 0 )); do
        if vagrant ssh -- true; then
            break
        fi
        sleep 10
    done
    if (( i > 0 )); then
        echo VM is up
    else
        echo VM failed to come up
        return 1
    fi
}

_playbook() {
    case $mode in
        host)
            inventory=inventory.cfg
            ;;
        aux)
            inventory=../example/inventory.cfg
            ;;
        *)
            echo _playbook called in guest mode
            return 1
            ;;
    esac
    ansible-playbook \
        -i $inventory \
        -e @vars-iri.yaml \
        -e @../example/secrets.yaml \
        ../example/playbook.yaml \
        "$@"
}

cd $(dirname $0) || fail
mode=host
while (( $# )); do
    echo $1
    case $1 in
        --mode)
            shift
            mode=$1
            shift
            ;;
        destroy)
            $1 || fail
            shift
            ;;
        ansible_test)
            case $mode in
                host)
                    _install || fail
                    $1 || fail
                    ;;
                *)
                    fail "$1 only works in host mode because ansible 2.9 doesn't support it"
                    ;;
            esac
            shift
            ;;
        full | incremental | idempotency)
            case $mode in
                host)
                    _up || fail
                    _install || fail
                    $1 || fail
                    ;;
                aux)
                    _install || fail
                    $1 || fail
                    ;;
                guest)
                    _up || fail
                    vagrant ssh -- /vagrant/tests/$0 --mode aux $1 || fail
                    ;;
            esac
            shift
            ;;
        *)
            fail unknown command $1
            ;;
    esac
done
