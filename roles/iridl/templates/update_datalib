#!/usr/bin/env bash

fail() {
    echo $2 >&2
    exit $1
}

while [[ $# -gt 0 ]]; do
  case $1 in
    --build-classic)
        build_classic=YES
        shift
        ;;
    *)
        fail 1 "Unknown argument '$1'"
        ;;
  esac
done

init_git() {
    local repo=$1
    local target=$2
    local version=$3
    export GIT_SSH=$4
    local clean=$5

    mkdir -p $target
    if [ ! -d $target/.git ]; then
        git clone --recursive $repo $target || fail $? "git clone failed"
    fi

    cd $target || fail "failed to cd to target dir $target"

    git fetch origin $version || fail $? "git fetch failed"
    git checkout -- . || fail $? "git checkout -- . failed"
    git -c advice.detachedHead=false checkout FETCH_HEAD || \
        fail $? "failed to checkout version $version"
    git submodule update --init --recursive || fail $? "failed to update submodules"

    if [ ! -z "${clean}" ]; then
        git clean -fdx || fail $? "git clean failed"
        git submodule foreach --recursive git clean -fdx || fail $? "submodule clean failed"
    fi
}

if [[ $(id -u) != 0 ]]; then
    fail 1 "This script should be run with sudo."
fi

# properly set interactive flags if in an interactive for any docker commands we run
if [[ -t 1 ]]; then
    interactive_args=-it
fi

### dlentries

if [[ ! -z "{{dlentries_repo}}" ]]; then
    init_git {{dlentries_repo}} {{dlentries_dir}} {{dlentries_version}} {{git_ssh_prefix}}bitbucket
fi

### python maproom

# only if we actually have a python maproom for this deployment
{% if python_maproom_repo is defined %}
init_git {{python_maproom_repo}} {python_maproom_src_dir}} \
         {{python_maproom_version}} {{git_ssh_prefix}}python_maproom clean

docker build -t python_maproom:{{python_maproom_version}} .
{% endif %}

### maproom

init_git {{maproom_repo}} {{maproom_src_dir}} {{maproom_version}} {{git_ssh_prefix}}bitbucket clean

if [ ! -z "${build_classic}" ]; then
    docker run --rm $interactive_args --user 0 \
           -v $PWD:/build/maproom iridl/maproom-dev:{{maproom_dev_version}} \
           ./build.sh utbuild.tag || fail $? "maproom build failed"

    mkdir -p {{maproom_install_dir}} || fail $? "couldn't create install dir"
    cp -r ___build/* {{maproom_install_dir}} || fail $? "failed to install maprooms"
fi

# seemingly necessary to get updates to show up (at least immediately)
if [[ -d {{compose_project_dir}} ]]; then  # doesn't exist yet on first run
    cd {{compose_project_dir}} || fail $? "failed to cd"
    docker-compose restart ingrid
    docker-compose restart maproom
    # in case one of the services was previously down, tell squid to check again.
    docker-compose exec squid squid -k reconfigure
fi

exit 0
